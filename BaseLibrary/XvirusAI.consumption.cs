// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace Xvirus
{
    public partial class XvirusAI
    {
        /// <summary>
        /// model input class for XvirusAI.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"VAR01")]
            public float VAR01 { get; set; }

            [ColumnName(@"VAR02")]
            public float VAR02 { get; set; }

            [ColumnName(@"VAR03")]
            public float VAR03 { get; set; }

            [ColumnName(@"VAR04")]
            public float VAR04 { get; set; }

            [ColumnName(@"VAR05")]
            public float VAR05 { get; set; }

            [ColumnName(@"VAR06")]
            public float VAR06 { get; set; }

            [ColumnName(@"VAR07")]
            public float VAR07 { get; set; }

            [ColumnName(@"VAR08")]
            public float VAR08 { get; set; }

            [ColumnName(@"VAR09")]
            public float VAR09 { get; set; }

            [ColumnName(@"VAR10")]
            public float VAR10 { get; set; }

            [ColumnName(@"VAR11")]
            public float VAR11 { get; set; }

            [ColumnName(@"VAR12")]
            public float VAR12 { get; set; }

            [ColumnName(@"VAR13")]
            public float VAR13 { get; set; }

            [ColumnName(@"VAR14")]
            public float VAR14 { get; set; }

            [ColumnName(@"VAR15")]
            public float VAR15 { get; set; }

            [ColumnName(@"VAR16")]
            public float VAR16 { get; set; }

            [ColumnName(@"MALWARE")]
            public float MALWARE { get; set; }

            [ColumnName(@"column18")]
            public string Column18 { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for XvirusAI.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"VAR01")]
            public float VAR01 { get; set; }

            [ColumnName(@"VAR02")]
            public float VAR02 { get; set; }

            [ColumnName(@"VAR03")]
            public float VAR03 { get; set; }

            [ColumnName(@"VAR04")]
            public float VAR04 { get; set; }

            [ColumnName(@"VAR05")]
            public float VAR05 { get; set; }

            [ColumnName(@"VAR06")]
            public float VAR06 { get; set; }

            [ColumnName(@"VAR07")]
            public float VAR07 { get; set; }

            [ColumnName(@"VAR08")]
            public float VAR08 { get; set; }

            [ColumnName(@"VAR09")]
            public float VAR09 { get; set; }

            [ColumnName(@"VAR10")]
            public float VAR10 { get; set; }

            [ColumnName(@"VAR11")]
            public float VAR11 { get; set; }

            [ColumnName(@"VAR12")]
            public float VAR12 { get; set; }

            [ColumnName(@"VAR13")]
            public float VAR13 { get; set; }

            [ColumnName(@"VAR14")]
            public float VAR14 { get; set; }

            [ColumnName(@"VAR15")]
            public float VAR15 { get; set; }

            [ColumnName(@"VAR16")]
            public float VAR16 { get; set; }

            [ColumnName(@"MALWARE")]
            public uint MALWARE { get; set; }

            [ColumnName(@"column18")]
            public string Column18 { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"PredictedLabel")]
            public float PredictedLabel { get; set; }

            [ColumnName(@"Score")]
            public float[] Score { get; set; }

        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("XvirusAI.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
